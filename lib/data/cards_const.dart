part of 'data.dart';

CardModel kHuman = CardModel(
  type: TypeCard.human,
  id: 0,
  name: 'you',
  nameInt: (context) => L10n.of(context).you,
  description: 'youDescription',
  descriptionInt: (context) => L10n.of(context).youDescription,
  prize: 0,
  quantity: -1,
  oxygen: -3,
);
CardModel kRock = CardModel(
  type: TypeCard.material,
  id: 1,
  name: 'rock',
  nameInt: (context) => L10n.of(context).rock,
  description: 'rockDescription',
  descriptionInt: (context) => L10n.of(context).rockDescription,
  prize: 1,
  quantity: -1,
);
CardModel kIron = CardModel(
  type: TypeCard.material,
  id: 2,
  name: 'iron',
  nameInt: (context) => L10n.of(context).iron,
  description: 'ironDescription',
  descriptionInt: (context) => L10n.of(context).ironDescription,
  prize: 1,
  quantity: -1,
);
CardModel kCoal = CardModel(
  type: TypeCard.material,
  id: 3,
  name: 'coal',
  nameInt: (context) => L10n.of(context).coal,
  description: 'coalDescription',
  descriptionInt: (context) => L10n.of(context).coalDescription,
  prize: 1,
  quantity: -1,
);
CardModel kWood = CardModel(
  type: TypeCard.material,
  id: 4,
  name: 'wood',
  nameInt: (context) => L10n.of(context).wood,
  description: 'woodDescription',
  descriptionInt: (context) => L10n.of(context).woodDescription,
  prize: 1,
  quantity: -1,
  // 1 tree, 1 human
);
CardModel kGlass = CardModel(
  type: TypeCard.material,
  id: 5,
  name: 'glass',
  nameInt: (context) => L10n.of(context).glass,
  description: 'glassDescription',
  descriptionInt: (context) => L10n.of(context).glassDescription,
  prize: 1,
  quantity: -1,
);
CardModel kPlastic = CardModel(
  type: TypeCard.material,
  id: 6,
  name: 'plastic',
  nameInt: (context) => L10n.of(context).plastic,
  description: 'plasticDescription',
  descriptionInt: (context) => L10n.of(context).plasticDescription,
  prize: 0,
  quantity: -1,
  carbonFootprint: 100,
  //this card cant be sold
);
CardModel kCopper = CardModel(
  type: TypeCard.material,
  id: 7,
  name: 'copper',
  nameInt: (context) => L10n.of(context).copper,
  description: 'copperDescription',
  descriptionInt: (context) => L10n.of(context).copperDescription,
  prize: 1,
  quantity: -1,
);
CardModel kDirt = CardModel(
  type: TypeCard.material,
  id: 8,
  name: 'dirt',
  nameInt: (context) => L10n.of(context).dirt,
  description: 'dirtDescription',
  descriptionInt: (context) => L10n.of(context).dirtDescription,
  prize: 1,
  quantity: -1,
);
CardModel kWater = CardModel(
  type: TypeCard.material,
  id: 9,
  name: 'water',
  nameInt: (context) => L10n.of(context).water,
  description: 'waterDescription',
  descriptionInt: (context) => L10n.of(context).waterDescription,
  prize: 1,
  quantity: -1,
);
CardModel kIronIngots = CardModel(
  type: TypeCard.material,
  id: 10,
  name: 'ironIngots',
  nameInt: (context) => L10n.of(context).ironIngots,
  description: 'ironIngotsDescription',
  descriptionInt: (context) => L10n.of(context).ironIngotsDescription,
  prize: 3,
  quantity: -2,
);
CardModel kSilicon = CardModel(
  type: TypeCard.material,
  id: 11,
  name: 'silicon',
  nameInt: (context) => L10n.of(context).silicon,
  description: 'siliconDescription',
  descriptionInt: (context) => L10n.of(context).siliconDescription,
  prize: 5,
  quantity: -1,
);
CardModel kCopperLine = CardModel(
  type: TypeCard.material,
  id: 12,
  name: 'copperLine',
  nameInt: (context) => L10n.of(context).copperLine,
  description: 'copperLineDescription',
  descriptionInt: (context) => L10n.of(context).copperLineDescription,
  prize: 4,
  quantity: -1,
);
CardModel kInsulator = CardModel(
  type: TypeCard.material,
  id: 13,
  name: 'insulators',
  nameInt: (context) => L10n.of(context).insulators,
  description: 'insulatorsDescription',
  descriptionInt: (context) => L10n.of(context).insulatorsDescription,
  prize: 2,
  quantity: -1,
);
CardModel kSolarCells = CardModel(
  type: TypeCard.material,
  id: 14,
  name: 'solarCells',
  nameInt: (context) => L10n.of(context).solarCells,
  description: 'solarCellsDescription',
  descriptionInt: (context) => L10n.of(context).solarCellsDescription,
  prize: 25,
  quantity: -5,
);
CardModel kStructure = CardModel(
  type: TypeCard.material,
  id: 15,
  name: 'structure',
  nameInt: (context) => L10n.of(context).structure,
  description: 'structureDescription',
  descriptionInt: (context) => L10n.of(context).structureDescription,
  prize: 5,
  quantity: -2,
);
CardModel kCables = CardModel(
  type: TypeCard.material,
  id: 16,
  name: 'cables',
  nameInt: (context) => L10n.of(context).cables,
  description: 'cablesDescription',
  descriptionInt: (context) => L10n.of(context).cablesDescription,
  prize: 7,
  quantity: -1,
);
CardModel kFastFood = CardModel(
  type: TypeCard.food,
  id: 17,
  name: 'fastFood',
  nameInt: (context) => L10n.of(context).fastFood,
  description: 'fastFoodDescription',
  descriptionInt: (context) => L10n.of(context).fastFoodDescription,
  prize: 0,
  quantity: -3,
  carbonFootprint: 100,
  food: 3,
  handicap: 500,
  health: -10,
);
CardModel kWheat = CardModel(
  type: TypeCard.food,
  id: 18,
  name: 'wheat',
  nameInt: (context) => L10n.of(context).wheat,
  description: 'wheatDescription',
  descriptionInt: (context) => L10n.of(context).wheatDescription,
  prize: 1,
  quantity: -1,
);
CardModel kCarrot = CardModel(
  type: TypeCard.food,
  id: 19,
  name: 'carrot',
  nameInt: (context) => L10n.of(context).carrot,
  description: 'carrotDescription',
  descriptionInt: (context) => L10n.of(context).carrotDescription,
  prize: 1,
  quantity: -1,
  food: 1,
);
CardModel kPotato = CardModel(
  type: TypeCard.food,
  id: 20,
  name: 'potato',
  nameInt: (context) => L10n.of(context).potato,
  description: 'potatoDescription',
  descriptionInt: (context) => L10n.of(context).potatoDescription,
  prize: 1,
  quantity: -1,
  food: 1,
);
CardModel kApple = CardModel(
  type: TypeCard.food,
  id: 21,
  name: 'apple',
  nameInt: (context) => L10n.of(context).apple,
  description: 'appleDescription',
  descriptionInt: (context) => L10n.of(context).appleDescription,
  prize: 1,
  quantity: -1,
  food: 1,
);
CardModel kMilk = CardModel(
  type: TypeCard.food,
  id: 22,
  name: 'milk',
  nameInt: (context) => L10n.of(context).milk,
  description: 'milkDescription',
  descriptionInt: (context) => L10n.of(context).milkDescription,
  prize: 1,
  quantity: -1,
  food: 1,
);
CardModel kMeat = CardModel(
  type: TypeCard.food,
  id: 23,
  name: 'meat',
  nameInt: (context) => L10n.of(context).meat,
  description: 'meatDescription',
  descriptionInt: (context) => L10n.of(context).meatDescription,
  prize: 1,
  quantity: -1,
);
CardModel kBanana = CardModel(
  type: TypeCard.food,
  id: 24,
  name: 'Banana',
  nameInt: (context) => L10n.of(context).Banana,
  description: 'bananaDescription',
  descriptionInt: (context) => L10n.of(context).bananaDescription,
  prize: 1,
  quantity: -1,
  food: 1,
);
CardModel kEgg = CardModel(
  type: TypeCard.food,
  id: 25,
  name: 'egg',
  nameInt: (context) => L10n.of(context).egg,
  description: 'eggDescription',
  descriptionInt: (context) => L10n.of(context).eggDescription,
  prize: 1,
  quantity: -1,
);
CardModel kStew = CardModel(
  type: TypeCard.food,
  id: 26,
  name: 'stew',
  nameInt: (context) => L10n.of(context).stew,
  description: 'stewDescription',
  descriptionInt: (context) => L10n.of(context).stewDescription,
  prize: 8,
  quantity: -1,
  food: 3,
  handicap: -200,
  health: 5,
);
CardModel kFriedMeat = CardModel(
  type: TypeCard.food,
  id: 27,
  name: 'friedMeat',
  nameInt: (context) => L10n.of(context).friedMeat,
  description: 'friedMeatDescription',
  descriptionInt: (context) => L10n.of(context).friedMeatDescription,
  prize: 4,
  quantity: -1,
  food: 1,
  health: 2,
);
CardModel kFlour = CardModel(
  type: TypeCard.food,
  id: 28,
  name: 'flour',
  nameInt: (context) => L10n.of(context).flour,
  description: 'flourDescription',
  descriptionInt: (context) => L10n.of(context).flourDescription,
  prize: 2,
  quantity: -1,
);
CardModel kBread = CardModel(
  type: TypeCard.food,
  id: 29,
  name: 'bread',
  nameInt: (context) => L10n.of(context).bread,
  description: 'breadDescription',
  descriptionInt: (context) => L10n.of(context).breadDescription,
  prize: 6,
  quantity: -1,
  food: 2,
);
CardModel kCake = CardModel(
  type: TypeCard.food,
  id: 30,
  name: 'cake',
  nameInt: (context) => L10n.of(context).cake,
  description: 'cakeDescription',
  descriptionInt: (context) => L10n.of(context).cakeDescription,
  prize: 18,
  quantity: -5,
  health: 10,
  handicap: -300,
  food: 5,
);
CardModel kHealthySalad = CardModel(
  type: TypeCard.food,
  id: 31,
  name: 'healthySalad',
  nameInt: (context) => L10n.of(context).healthySalad,
  description: 'healthySaladDescription',
  descriptionInt: (context) => L10n.of(context).healthySaladDescription,
  prize: 6,
  quantity: -2,
  food: 3,
  health: 3,
  handicap: -100,
  carbonFootprint: -100,
);
CardModel kFruitShake = CardModel(
  type: TypeCard.food,
  id: 32,
  name: 'fruitShake',
  nameInt: (context) => L10n.of(context).fruitShake,
  description: 'fruitShakeDescription',
  descriptionInt: (context) => L10n.of(context).fruitShakeDescription,
  prize: 5,
  quantity: -1,
  food: 2,
  health: 3,
);
CardModel kOmelet = CardModel(
  type: TypeCard.food,
  id: 33,
  name: 'omelet',
  nameInt: (context) => L10n.of(context).omelet,
  description: 'omeletDescription',
  descriptionInt: (context) => L10n.of(context).omeletDescription,
  prize: 11,
  quantity: -3,
  health: 8,
  handicap: -300,
  food: 5,
);
CardModel kApplePie = CardModel(
  type: TypeCard.food,
  id: 34,
  name: 'applePie',
  nameInt: (context) => L10n.of(context).applePie,
  description: 'applePieDescription',
  descriptionInt: (context) => L10n.of(context).applePieDescription,
  prize: 12,
  quantity: -4,
  food: 5,
  handicap: -200,
  health: 5,
);
CardModel kFarmFeast = CardModel(
  type: TypeCard.food,
  id: 35,
  name: 'farmFeast',
  nameInt: (context) => L10n.of(context).farmFeast,
  description: 'farmFeastDescription',
  descriptionInt: (context) => L10n.of(context).farmFeastDescription,
  prize: 50,
  quantity: -5,
  handicap: -1000,
  carbonFootprint: -1000,
  health: 20,
  food: 20,
);
CardModel kBaul = CardModel(
  type: TypeCard.structure,
  id: 36,
  name: 'baul',
  nameInt: (context) => L10n.of(context).baul,
  description: 'baulDescription',
  descriptionInt: (context) => L10n.of(context).baulDescription,
  prize: 1,
  quantity: 2,
  // Provide 5 more card slot
);
CardModel kWarehouse = CardModel(
  type: TypeCard.structure,
  id: 37,
  name: 'warehouse',
  nameInt: (context) => L10n.of(context).warehouse,
  description: 'warehouseDescription',
  descriptionInt: (context) => L10n.of(context).warehouseDescription,
  prize: 5,
  quantity: 7,
  energy: -2,
  // Provide 7 more card slot
);
CardModel kFurnace = CardModel(
  type: TypeCard.structure,
  id: 38,
  name: 'furnace',
  nameInt: (context) => L10n.of(context).furnace,
  description: 'furnaceDescription',
  descriptionInt: (context) => L10n.of(context).furnaceDescription,
  prize: 2,
  quantity: -5,
);
CardModel kCraftingTable = CardModel(
  type: TypeCard.structure,
  id: 39,
  name: 'craftingTable',
  nameInt: (context) => L10n.of(context).craftingTable,
  description: 'craftingTableDescription',
  descriptionInt: (context) => L10n.of(context).craftingTableDescription,
  prize: 1,
  quantity: -1,
);
CardModel kSawmill = CardModel(
  type: TypeCard.structure,
  id: 40,
  name: 'sawmill',
  nameInt: (context) => L10n.of(context).sawmill,
  description: 'sawmillDescription',
  descriptionInt: (context) => L10n.of(context).sawmillDescription,
  prize: 3,
  quantity: -5,
  energy: -3,
);
CardModel kElectricTable = CardModel(
  type: TypeCard.structure,
  id: 41,
  name: 'electricTable',
  nameInt: (context) => L10n.of(context).electricTable,
  description: 'electricTableDescription',
  descriptionInt: (context) => L10n.of(context).electricTableDescription,
  prize: 5,
  quantity: -5,
  energy: -1,
);
CardModel kSolarPanel = CardModel(
  type: TypeCard.structure,
  id: 42,
  name: 'solarPanel',
  nameInt: (context) => L10n.of(context).solarPanel,
  description: 'solarPanelDescription',
  descriptionInt: (context) => L10n.of(context).solarPanelDescription,
  prize: 100,
  quantity: -20,
  energy: 15,
  // Provide 15 additional energy
);
CardModel kFarm = CardModel(
  type: TypeCard.structure,
  id: 43,
  name: 'farm',
  nameInt: (context) => L10n.of(context).farm,
  description: 'farmDescription',
  descriptionInt: (context) => L10n.of(context).farmDescription,
  prize: 5,
  quantity: -5,
  energy: -3,
);
CardModel kOrchard = CardModel(
  type: TypeCard.structure,
  id: 44,
  name: 'orchard',
  nameInt: (context) => L10n.of(context).orchard,
  description: 'orchardDescription',
  descriptionInt: (context) => L10n.of(context).orchardDescription,
  prize: 4,
  quantity: -4,
);
CardModel kMill = CardModel(
  type: TypeCard.structure,
  id: 45,
  name: 'mill',
  nameInt: (context) => L10n.of(context).mill,
  description: 'millDescription',
  descriptionInt: (context) => L10n.of(context).millDescription,
  prize: 5,
  quantity: -5,
  energy: -2,
);
CardModel kGreenhouse = CardModel(
  type: TypeCard.structure,
  id: 46,
  name: 'greenhouse',
  nameInt: (context) => L10n.of(context).greenhouse,
  description: 'greenhouseDescription',
  descriptionInt: (context) => L10n.of(context).greenhouseDescription,
  prize: 4,
  quantity: -5,
  energy: -2,
);
CardModel kWindTurbine = CardModel(
  type: TypeCard.structure,
  id: 47,
  name: 'windTurbine',
  nameInt: (context) => L10n.of(context).windTurbine,
  description: 'windTurbineDescription',
  descriptionInt: (context) => L10n.of(context).windTurbineDescription,
  prize: 15,
  quantity: -5,
  energy: 5,
);
CardModel kRecycler = CardModel(
  type: TypeCard.structure,
  id: 48,
  name: 'recycler',
  nameInt: (context) => L10n.of(context).recycler,
  description: 'recyclerDescription',
  descriptionInt: (context) => L10n.of(context).recyclerDescription,
  prize: 1,
  quantity: -1,
  energy: -5,
);
CardModel kComposter = CardModel(
  type: TypeCard.structure,
  id: 49,
  name: 'composter',
  nameInt: (context) => L10n.of(context).composter,
  description: 'composterDescription',
  descriptionInt: (context) => L10n.of(context).composterDescription,
  prize: 1,
  quantity: -2,
);
CardModel kCampfire = CardModel(
  type: TypeCard.structure,
  id: 50,
  name: 'campfire',
  nameInt: (context) => L10n.of(context).campfire,
  description: 'campfireDescription',
  descriptionInt: (context) => L10n.of(context).campfireDescription,
  prize: 2,
  quantity: -1,
);
CardModel kDog = CardModel(
  type: TypeCard.animal,
  id: 51,
  name: 'dog',
  nameInt: (context) => L10n.of(context).dog,
  description: 'dogDescription',
  descriptionInt: (context) => L10n.of(context).dogDescription,
  prize: 0,
  quantity: -1,
  handicap: -500,
  oxygen: -2,
);
CardModel kCow = CardModel(
  type: TypeCard.animal,
  id: 52,
  name: 'cow',
  nameInt: (context) => L10n.of(context).cow,
  description: 'cowDescription',
  descriptionInt: (context) => L10n.of(context).cowDescription,
  prize: 5,
  quantity: -1,
  carbonFootprint: 300,
  oxygen: -2,
);
CardModel kHen = CardModel(
  type: TypeCard.animal,
  id: 53,
  name: 'hen',
  nameInt: (context) => L10n.of(context).hen,
  description: 'henDescription',
  descriptionInt: (context) => L10n.of(context).henDescription,
  prize: 2,
  quantity: -1,
  oxygen: -2,
);
CardModel kTree = CardModel(
  type: TypeCard.plant,
  id: 54,
  name: 'tree',
  nameInt: (context) => L10n.of(context).tree,
  description: 'treeDescription',
  descriptionInt: (context) => L10n.of(context).treeDescription,
  prize: 3,
  quantity: -1,
  oxygen: 2,
);
CardModel kEnergy = CardModel(
  type: TypeCard.idea,
  id: 55,
  name: 'energy',
  nameInt: (context) => L10n.of(context).energy,
  description: 'energyDescription',
  descriptionInt: (context) => L10n.of(context).energyDescription,
  prize: 1,
  quantity: -1,
);
CardModel kCCBurgers = CardModel(
  type: TypeCard.structure,
  id: 56,
  name: 'ccBurgers',
  nameInt: (context) => L10n.of(context).ccBurgers,
  description: 'ccBurgersDescription',
  descriptionInt: (context) => L10n.of(context).ccBurgersDescription,
  prize: 1,
  quantity: -3,
);
CardModel kEmployment = CardModel(
  type: TypeCard.structure,
  id: 57,
  name: 'employment',
  nameInt: (context) => L10n.of(context).employment,
  description: 'employmentDescription',
  descriptionInt: (context) => L10n.of(context).employmentDescription,
  prize: 1,
  quantity: -3,
);
CardModel kCoalPlant = CardModel(
  type: TypeCard.structure,
  id: 58,
  name: 'coalPlant',
  nameInt: (context) => L10n.of(context).coalPlant,
  description: 'coalPlantDescription',
  descriptionInt: (context) => L10n.of(context).coalPlantDescription,
  prize: 1,
  quantity: -3,
  health: -2,
  energy: 10,
  carbonFootprint: 200,
  oxygen: -5,
);
CardModel kAppleTree = CardModel(
  type: TypeCard.plant,
  id: 59,
  name: 'appleTree',
  nameInt: (context) => L10n.of(context).appleTree,
  description: 'appleTreeDescription',
  descriptionInt: (context) => L10n.of(context).appleTreeDescription,
  prize: 1,
  quantity: -1,
  oxygen: 2,
);
CardModel kBananaTree = CardModel(
  type: TypeCard.plant,
  id: 60,
  name: 'bananaTree',
  nameInt: (context) => L10n.of(context).bananaTree,
  description: 'bananaTreeDescription',
  descriptionInt: (context) => L10n.of(context).bananaTreeDescription,
  prize: 1,
  quantity: -1,
  oxygen: 2,
);
CardModel kPoop = CardModel(
  type: TypeCard.material,
  id: 61,
  name: 'poop',
  nameInt: (context) => L10n.of(context).poop,
  description: 'poopDescription',
  descriptionInt: (context) => L10n.of(context).poopDescription,
  prize: 1,
  quantity: -1,
  health: -5,
  carbonFootprint: 100,
);
CardModel kPlanks = CardModel(
  type: TypeCard.material,
  id: 62,
  name: 'planks',
  nameInt: (context) => L10n.of(context).planks,
  description: 'planksDescription',
  descriptionInt: (context) => L10n.of(context).planksDescription,
  prize: 2,
  quantity: -1,
);
CardModel kFoodPack = CardModel(
  type: TypeCard.pack,
  id: 63,
  name: 'foodPack',
  nameInt: (context) => L10n.of(context).foodPack,
  //subtitle: 'Food Card',
  description: 'foodPackDescription',
  descriptionInt: (context) => L10n.of(context).foodPackDescription,
  prize: 0,
  quantity: -0,
);
CardModel kMaterialPack = CardModel(
  type: TypeCard.pack,
  id: 64,
  name: 'materialPack',
  nameInt: (context) => L10n.of(context).materialPack,
  //subtitle: 'Material Card',
  description: 'materialPackDescription',
  descriptionInt: (context) => L10n.of(context).materialPackDescription,
  prize: 0,
  quantity: -0,
);
CardModel kInitialPack = CardModel(
  type: TypeCard.pack,
  id: 65,
  name: 'initialPack',
  nameInt: (context) => L10n.of(context).initialPack,
  //subtitle: 'Compound Material Card',
  description: 'initialPackDescription',
  descriptionInt: (context) => L10n.of(context).initialPackDescription,
  prize: 0,
  quantity: -0,
);
CardModel kStructurePack = CardModel(
  type: TypeCard.pack,
  id: 66,
  name: 'structurePack',
  nameInt: (context) => L10n.of(context).structurePack,
  //subtitle: 'Structure Card',
  description: 'structurePackDescription',
  descriptionInt: (context) => L10n.of(context).structurePackDescription,
  prize: 0,
  quantity: -0,
);
CardModel kIdeaPack = CardModel(
  type: TypeCard.pack,
  id: 67,
  name: 'ideaPack',
  nameInt: (context) => L10n.of(context).ideaPack,
  //subtitle: 'Idea Card',
  description: 'ideaPackDescription',
  descriptionInt: (context) => L10n.of(context).ideaPackDescription,
  prize: 0,
  quantity: -0,
);
CardModel kNaturePack = CardModel(
  type: TypeCard.pack,
  id: 68,
  name: 'naturePack',
  nameInt: (context) => L10n.of(context).naturePack,
  //subtitle: 'Nature Card',
  description: 'naturePackDescription',
  descriptionInt: (context) => L10n.of(context).naturePackDescription,
  prize: 0,
  quantity: -0,
);
CardModel kIronIngotsIdea = CardModel(
  type: TypeCard.idea,
  id: 69,
  name: 'ideaIronIngots',
  nameInt: (context) => L10n.of(context).ideaIronIngots,
  description: 'ideaIronIngotsDescription',
  descriptionInt: (context) => L10n.of(context).ideaIronIngotsDescription,
  prize: 1,
  quantity: -1,
);
CardModel kSiliconIdea = CardModel(
  type: TypeCard.idea,
  id: 70,
  name: 'ideaSilicon',
  nameInt: (context) => L10n.of(context).ideaSilicon,
  description: 'ideaSiliconDescription',
  descriptionInt: (context) => L10n.of(context).ideaSiliconDescription,
  prize: 1,
  quantity: -1,
);
CardModel kCopperLineIdea = CardModel(
  type: TypeCard.idea,
  id: 71,
  name: 'ideaCopperLine',
  nameInt: (context) => L10n.of(context).ideaCopperLine,
  description: 'ideaCopperLineDescription',
  descriptionInt: (context) => L10n.of(context).ideaCopperLineDescription,
  prize: 1,
  quantity: -1,
);
CardModel kInsulatorIdea = CardModel(
  type: TypeCard.idea,
  id: 72,
  name: 'ideaInsulator',
  nameInt: (context) => L10n.of(context).ideaInsulator,
  description: 'ideaInsulatorDescription',
  descriptionInt: (context) => L10n.of(context).ideaInsulatorDescription,
  prize: 1,
  quantity: -1,
);
CardModel kSolarCellsIdea = CardModel(
  type: TypeCard.idea,
  id: 73,
  name: 'ideaSolarcells',
  nameInt: (context) => L10n.of(context).ideaSolarcells,
  description: 'ideaSolarcellsDescription',
  descriptionInt: (context) => L10n.of(context).ideaSolarcellsDescription,
  prize: 1,
  quantity: -1,
);
CardModel kStructureIdea = CardModel(
  type: TypeCard.idea,
  id: 74,
  name: 'ideaStructure',
  nameInt: (context) => L10n.of(context).ideaStructure,
  description: 'ideaStructureDescription',
  descriptionInt: (context) => L10n.of(context).ideaStructureDescription,
  prize: 1,
  quantity: -1,
);
CardModel kCablesIdea = CardModel(
  type: TypeCard.idea,
  id: 75,
  name: 'ideaCables',
  nameInt: (context) => L10n.of(context).ideaCables,
  description: 'ideaCablesDescription',
  descriptionInt: (context) => L10n.of(context).ideaCablesDescription,
  prize: 1,
  quantity: -1,
);
CardModel kStewIdea = CardModel(
  type: TypeCard.idea,
  id: 76,
  name: 'ideaStew',
  nameInt: (context) => L10n.of(context).ideaStew,
  description: 'ideaStewDescription',
  descriptionInt: (context) => L10n.of(context).ideaStewDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFriedMeatIdea = CardModel(
  type: TypeCard.idea,
  id: 77,
  name: 'ideaFriedMeat',
  nameInt: (context) => L10n.of(context).ideaFriedMeat,
  description: 'ideaFriedMeatDescription',
  descriptionInt: (context) => L10n.of(context).ideaFriedMeatDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFlourIdea = CardModel(
  type: TypeCard.idea,
  id: 78,
  name: 'ideaFlour',
  nameInt: (context) => L10n.of(context).ideaFlour,
  description: 'ideaFlourDescription',
  descriptionInt: (context) => L10n.of(context).ideaFlourDescription,
  prize: 1,
  quantity: -1,
);
CardModel kBreadIdea = CardModel(
  type: TypeCard.idea,
  id: 79,
  name: 'ideaBread',
  nameInt: (context) => L10n.of(context).ideaBread,
  description: 'ideaBreadDescription',
  descriptionInt: (context) => L10n.of(context).ideaBreadDescription,
  prize: 2,
  quantity: -1,
);
CardModel kCakeIdea = CardModel(
  type: TypeCard.idea,
  id: 80,
  name: 'ideaCake',
  nameInt: (context) => L10n.of(context).ideaCake,
  description: 'ideaCakeDescription',
  descriptionInt: (context) => L10n.of(context).ideaCakeDescription,
  prize: 1,
  quantity: -1,
);
CardModel kHealthySaladIdea = CardModel(
  type: TypeCard.idea,
  id: 81,
  name: 'ideaHealthySalad',
  nameInt: (context) => L10n.of(context).ideaHealthySalad,
  description: 'ideaHealthySaladDescription',
  descriptionInt: (context) => L10n.of(context).ideaHealthySaladDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFruitShakeIdea = CardModel(
  type: TypeCard.idea,
  id: 82,
  name: 'ideaFruitShake',
  nameInt: (context) => L10n.of(context).ideaFruitShake,
  description: 'ideaFruitShakeDescription',
  descriptionInt: (context) => L10n.of(context).ideaFruitShakeDescription,
  prize: 1,
  quantity: -1,
);
CardModel kPotatoOmeletIdea = CardModel(
  type: TypeCard.idea,
  id: 83,
  name: 'ideaPotatoOmelet',
  nameInt: (context) => L10n.of(context).ideaPotatoOmelet,
  description: 'ideaPotatoOmeletDescription',
  descriptionInt: (context) => L10n.of(context).ideaPotatoOmeletDescription,
  prize: 1,
  quantity: -1,
);
CardModel kApplePieIdea = CardModel(
  type: TypeCard.idea,
  id: 84,
  name: 'ideaApplePie',
  nameInt: (context) => L10n.of(context).ideaApplePie,
  description: 'ideaApplePieDescription',
  descriptionInt: (context) => L10n.of(context).ideaApplePieDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFarmFeastIdea = CardModel(
  type: TypeCard.idea,
  id: 85,
  name: 'ideaFarmFeast',
  nameInt: (context) => L10n.of(context).ideaFarmFeast,
  description: 'ideaFarmFeastDescription',
  descriptionInt: (context) => L10n.of(context).ideaFarmFeastDescription,
  prize: 1,
  quantity: -1,
);
CardModel kBaulIdea = CardModel(
  type: TypeCard.idea,
  id: 86,
  name: 'ideaBaul',
  nameInt: (context) => L10n.of(context).ideaBaul,
  description: 'ideaBaulDescription',
  descriptionInt: (context) => L10n.of(context).ideaBaulDescription,
  prize: 1,
  quantity: -1,
);
CardModel kWarehouseIdea = CardModel(
  type: TypeCard.idea,
  id: 87,
  name: 'ideaWarehouse',
  nameInt: (context) => L10n.of(context).ideaWarehouse,
  description: 'ideaWarehouseDescription',
  descriptionInt: (context) => L10n.of(context).ideaWarehouseDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFurnaceIdea = CardModel(
  type: TypeCard.idea,
  id: 88,
  name: 'ideaFurnace',
  nameInt: (context) => L10n.of(context).ideaFurnace,
  description: 'ideaFurnaceDescription',
  descriptionInt: (context) => L10n.of(context).ideaFurnaceDescription,
  prize: 1,
  quantity: -1,
);
CardModel kCraftingTableIdea = CardModel(
  type: TypeCard.idea,
  id: 89,
  name: 'ideaCraftingTable',
  nameInt: (context) => L10n.of(context).ideaCraftingTable,
  description: 'ideaCraftingTableDescription',
  descriptionInt: (context) => L10n.of(context).ideaCraftingTableDescription,
  prize: 1,
  quantity: -1,
);
CardModel kSawmillIdea = CardModel(
  type: TypeCard.idea,
  id: 90,
  name: 'ideaSawmill',
  nameInt: (context) => L10n.of(context).ideaSawmill,
  description: 'ideaSawmillDescription',
  descriptionInt: (context) => L10n.of(context).ideaSawmillDescription,
  prize: 1,
  quantity: -1,
);
CardModel kElectronicTableIdea = CardModel(
  type: TypeCard.idea,
  id: 91,
  name: 'electricTable',
  nameInt: (context) => L10n.of(context).electricTable,
  description: 'electricTable',
  descriptionInt: (context) => L10n.of(context).electricTable,
  prize: 1,
  quantity: -1,
);
CardModel kSolarPanelIdea = CardModel(
  type: TypeCard.idea,
  id: 92,
  name: 'ideaSolarpanel',
  nameInt: (context) => L10n.of(context).ideaSolarpanel,
  description: 'ideaSolarpanelDescription',
  descriptionInt: (context) => L10n.of(context).ideaSolarpanelDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFarmIdea = CardModel(
  type: TypeCard.idea,
  id: 93,
  name: 'ideaFarm',
  nameInt: (context) => L10n.of(context).ideaFarm,
  description: 'ideaFarmDescription',
  descriptionInt: (context) => L10n.of(context).ideaFarmDescription,
  prize: 1,
  quantity: -1,
);
CardModel kOrchardIdea = CardModel(
  type: TypeCard.idea,
  id: 94,
  name: 'ideaOrchard',
  nameInt: (context) => L10n.of(context).ideaOrchard,
  description: 'ideaOrchardDescription',
  descriptionInt: (context) => L10n.of(context).ideaOrchardDescription,
  prize: 1,
  quantity: -1,
);
CardModel kMillIdea = CardModel(
  type: TypeCard.idea,
  id: 95,
  name: 'ideaMill',
  nameInt: (context) => L10n.of(context).ideaMill,
  description: 'ideaMillDescripcion',
  descriptionInt: (context) => L10n.of(context).ideaMillDescripcion,
  prize: 1,
  quantity: -1,
);
CardModel kGreenhouseIdea = CardModel(
  type: TypeCard.idea,
  id: 96,
  name: 'ideaGreenhouse',
  nameInt: (context) => L10n.of(context).ideaGreenhouse,
  description: 'ideaGreenhouseDescripcion',
  descriptionInt: (context) => L10n.of(context).ideaGreenhouseDescripcion,
  prize: 1,
  quantity: -1,
);
CardModel kWindTurbineIdea = CardModel(
  type: TypeCard.idea,
  id: 97,
  name: 'ideaWindturbine',
  nameInt: (context) => L10n.of(context).ideaWindturbine,
  description: 'ideaWindturbineDescription',
  descriptionInt: (context) => L10n.of(context).ideaWindturbineDescription,
  prize: 1,
  quantity: -1,
);
CardModel kRecyclerIdea = CardModel(
  type: TypeCard.idea,
  id: 98,
  name: 'ideaRecycler',
  nameInt: (context) => L10n.of(context).ideaRecycler,
  description: 'ideaRecyclerDescription',
  descriptionInt: (context) => L10n.of(context).ideaRecyclerDescription,
  prize: 1,
  quantity: -1,
);
CardModel kComposterIdea = CardModel(
  type: TypeCard.idea,
  id: 99,
  name: 'ideaComposter',
  nameInt: (context) => L10n.of(context).ideaComposter,
  description: 'ideaComposterDescripcion',
  descriptionInt: (context) => L10n.of(context).ideaComposterDescripcion,
  prize: 1,
  quantity: -1,
);
CardModel kCampfireIdea = CardModel(
  type: TypeCard.idea,
  id: 100,
  name: 'ideaCampfire',
  nameInt: (context) => L10n.of(context).ideaCampfire,
  description: 'ideaCampfireDescription',
  descriptionInt: (context) => L10n.of(context).ideaCampfireDescription,
  prize: 1,
  quantity: -1,
);
CardModel kAppleTreeIdea = CardModel(
  type: TypeCard.idea,
  id: 101,
  name: 'ideaAppleTree',
  nameInt: (context) => L10n.of(context).ideaAppleTree,
  description: 'ideaAppleTreeDescription',
  descriptionInt: (context) => L10n.of(context).ideaAppleTreeDescription,
  prize: 1,
  quantity: -1,
);
CardModel kBananaTreeIdea = CardModel(
  type: TypeCard.idea,
  id: 102,
  name: 'ideaBananaTree',
  nameInt: (context) => L10n.of(context).ideaBananaTree,
  description: 'ideaBananaTreeDescription',
  descriptionInt: (context) => L10n.of(context).ideaBananaTreeDescription,
  prize: 1,
  quantity: -1,
);
CardModel kMilkIdea = CardModel(
  type: TypeCard.idea,
  id: 103,
  name: 'ideaMilk',
  nameInt: (context) => L10n.of(context).ideaMilk,
  description: 'ideaMilkDescription',
  descriptionInt: (context) => L10n.of(context).ideaMilkDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFertilizerIdea = CardModel(
  type: TypeCard.idea,
  id: 104,
  name: 'ideaFertilizer',
  nameInt: (context) => L10n.of(context).ideaFertilizer,
  description: 'ideaFertilizerDescription',
  descriptionInt: (context) => L10n.of(context).ideaFertilizerDescription,
  prize: 1,
  quantity: -1,
);
CardModel kWoodIdea = CardModel(
  type: TypeCard.idea,
  id: 105,
  name: 'ideaWood',
  nameInt: (context) => L10n.of(context).ideaWood,
  description: 'ideaWoodDescription',
  descriptionInt: (context) => L10n.of(context).ideaWoodDescription,
  prize: 1,
  quantity: -1,
);
CardModel kFertilizer = CardModel(
  id: 106,
  name: 'fertilizer',
  nameInt: (context) => L10n.of(context).fertilizer,
  description: 'fertilizerDescription',
  descriptionInt: (context) => L10n.of(context).fertilizerDescription,
  type: TypeCard.material,
  prize: 1,
  quantity: -1,
);
CardModel kTreeSeed = CardModel(
  id: 107,
  name: 'treeSeed',
  nameInt: (context) => L10n.of(context).treeSeed,
  description: 'treeSeedDescription',
  descriptionInt: (context) => L10n.of(context).treeSeedDescription,
  type: TypeCard.material,
  prize: 1,
  quantity: -1,
);
CardModel kWell = CardModel(
  id: 108,
  name: 'well',
  nameInt: (context) => L10n.of(context).well,
  description: 'wellDescription',
  descriptionInt: (context) => L10n.of(context).wellDescription,
  type: TypeCard.structure,
  prize: 1,
  quantity: -1,
);
CardModel kSallary = CardModel(
  id: 114,
  name: 'salary',
  nameInt: (context) => L10n.of(context).salary,
  description: 'salaryDescription',
  descriptionInt: (context) => L10n.of(context).salaryDescription,
  type: TypeCard.structure,
  prize: 5,
  quantity: -1,
);
CardModel kTreeIdea = CardModel(
  id: 110,
  name: 'tree',
  nameInt: (context) => L10n.of(context).tree,
  description: 'treeDescription',
  descriptionInt: (context) => L10n.of(context).treeDescription,
  type: TypeCard.idea,
  prize: 1,
  quantity: -1,
);
CardModel kOmeletIdea = CardModel(
  id: 111,
  name: 'omelet',
  nameInt: (context) => L10n.of(context).omelet,
  description: 'omeletDescription',
  descriptionInt: (context) => L10n.of(context).omeletDescription,
  type: TypeCard.idea,
  prize: 1,
  quantity: -1,
);
CardModel kPlankIdea = CardModel(
  id: 112,
  name: 'planks',
  nameInt: (context) => L10n.of(context).planks,
  description: 'planksDescription',
  descriptionInt: (context) => L10n.of(context).planksDescription,
  type: TypeCard.idea,
  prize: 1,
  quantity: -1,
);
CardModel kDev = CardModel(
  type: TypeCard.dev,
  id: 1000,
  name: 'devTeam',
  nameInt: (context) => L10n.of(context).devTeam,
  description: 'devTeamDescription',
  descriptionInt: (context) => L10n.of(context).devTeamDescription,
  prize: 1,
  quantity: -1,
  oxygen: 5,
  carbonFootprint: -500,
  energy: 10,
  handicap: -500,
);
CardModel kFabian = CardModel(
  id: 1001,
  name: 'devTeam',
  nameInt: (context) => L10n.of(context).devTeam,
  description: 'devTeamDescription',
  descriptionInt: (context) => L10n.of(context).devTeamDescription,
  type: TypeCard.dev,
  prize: 1,
  quantity: -1,
  oxygen: 3,
);
CardModel kYonnier = CardModel(
  id: 1002,
  name: 'devTeam',
  nameInt: (context) => L10n.of(context).devTeam,
  description: 'devTeamDescription',
  descriptionInt: (context) => L10n.of(context).devTeamDescription,
  type: TypeCard.dev,
  prize: 1,
  quantity: -1,
  carbonFootprint: -300,
);
CardModel kBrian = CardModel(
  id: 1003,
  name: 'devTeam',
  nameInt: (context) => L10n.of(context).devTeam,
  description: 'devTeamDescription',
  descriptionInt: (context) => L10n.of(context).devTeamDescription,
  type: TypeCard.dev,
  prize: 1,
  quantity: -1,
  energy: 7,
);
CardModel kSantiago = CardModel(
  id: 1004,
  name: 'devTeam',
  nameInt: (context) => L10n.of(context).devTeam,
  description: 'devTeamDescription',
  descriptionInt: (context) => L10n.of(context).devTeamDescription,
  type: TypeCard.dev,
  prize: 1,
  quantity: -1,
  handicap: -300,
);
